# --------- vim ------------
## quickstart
nnoremap h :vs $HOME/.vim/reference_cards/vim_ref_card.txt<CR>
nnoremap hp :vs $HOME/.vim/reference_cards/python_ref_card.txt<CR>
nnoremap hg :vs $HOME/.vim/reference_cards/git_ref_card.txt<CR>
nnoremap hd :vs $HOME/.vim/reference_cards/django_ref_card.txt<CR>
TODO >>> remember tmux session (incl.virtualenv)

TODO >>> use vimviki on vimrc
TODO >>> copy internal variables definition into vimwiki page
TODO >>> /usr/share/vim/vim74/syntax/*.vim --> pre-packaged syntax highlighting files

TODO >>> USE COMMAND to wrap Ggrep, augment with ack's quickfix navigation(the shortcuts only work in the quickfix window!! how?)
TIPS: :vimgrep PATTERN **/* "search recursively regardless of whether is tracked by a repo
TIPS: qf window => use arrow keys to navigate, press o to open & close qf, v to open in split (configured in ftplugin/qf.vim)
TIPS: to list custom maps, use e.g. :nmap, imap, vmap
TIPS: with relative numbering, 20gg is nrq. Instead use 10k (up) or 9j(down)

#vim-surround
ds': delete surround
cs"' : change surround from " to '
ysiw) or ( does not matter : you-surround the word
ysiw<q> : <q>XXX</q>

#session_name: e.g. WORK PLAY
tmux new -s session_name
tmux attach -t session_name
tmux switch -t session_name
tmux list-sessions
tmux detach (prefix + d)
tmux >> prefix+n or prefix+p to navigate between tmux windows
tmux >> open new window?? ls windows??? move tmux pane to new window???
tmux-resurrect >> prefix ctrl-s (save session), prefix ctrl-r (restore)

#window/tab management (pls try to mirror tmux keys..)
<C-w>T: open current buffer in new tab
<C-w>=: normalize all opened windows
<C-w>R: Swap top/bottom or left/right split
<C-w>o: Close every window in the current tabview but the current one
gt: :tabnext, or 3gt to go to tab number 3
gT: :tabprevious
:tabclose

ctrl-p: Ctrl+v to open in vertical splits
ctrl-j,k : navigates
vap then :sort, dap, yap: a paragraph, delimited by a blank line
:qa   : to attempt to close all windows
<C-r><C-w> : insert the word under the cursor, very useful
[[, ]]: jump to the start and end of a def/class identifier
/\<(red|blue|green)\> : search for exact words
<Leader>d, then again : display(toggle) changes since last write
c], [c: vim-gitgutter(git diff) go to the next change
<C-c> : cancel partial command
daw   : delete the word under the cursor
caw   : ,delete the word under the cursor and put you in insert mode
*     : search for word under cursor
<space> : switch off search highlight
=     : format selected code
ea    : append at the end of a word
F2    : paste mode to preserve source formatting
3S    : cut 3 lines (faster than visual selection) and enter Insert mode
:ls   : list buffers
:b 5  : switch to buffer no. 5
:h :r! , :h :vnew, :h :bar(| separator) e.g. :tabnew | r !echo XXXX
:echo &XXX: display the value of Vim variable
<Leader><Leader>: alternate between last two opened buffers
Vp : select line and paste what was yanked (helpful!)
if has('XXX') : XXX is a feature, e.g. vim --version, +python
5cc : delete line(s) and enter Insert mode
<Leader>p: paste from the clipboard
:Vexplore : netrw file explorer

tip: do something, then visual-select block and press . to repeat the command on each line

:up[date] instead of :w
cit, dit, yit, vit : inside tags <>
similarly ci", ci{ and so forth

5gg    :  instead of 5G
<, >   : indent, unindent the line
/the\> : > as word boundary in searching, \> to escape
//     : grep word under cursor
/XXX then l:
<C-I>  : jump forward (Inwards)
<C-O>  : jump backward (Old)
:PluginInstall : Install plugins through Vundle
:PluginInstall! : Updates all plugins
:set filetype?  : show the filetype recognized by vim, if any

<<< ctrl-p >>> /* integrate with ag/ack, vim / -> omnisearch interface? */
<C-p>  : start
<C-j>, <C-k> : navigate
<C-v>  : open the file in a new split

<<< ack >>>
//XXXX : search for the string in the project folder
//XXXX folder/ : search recursively within the specified directory
o, O  : open file and close the quickfix window(use O)
go : preview file (open but maintain focus on ack.vim results) -- why don't we generate the preview with each cursor movement?
v  : open in a new vertical split
q  : quit the quickfix window

<<< git >>>
git commit --amend : amend last commit
git log -n 3: view the commit history
git reset   : simply unstaging everything
git reset --hard: Clears your index(staging area), reverts all changes in your working directory to the last commit.

" fugitive git bindings
nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :Gdiff<CR>
nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <space>gp :Ggrep<Space>
nnoremap <space>gm :Gmove<Space>
nnoremap <space>gb :Git branch<Space>
nnoremap <space>go :Git checkout<Space>
nnoremap <space>gps :Dispatch! git push<CR>
nnoremap <space>gpl :Dispatch! git pull<CR>"

TODO
<<<< convert to database? auto sort(rank) based on feedback? >>>>
<<<< map using <Leader> key: e.g. <Leader>sifc sif >>>>>>
<<<< <Leader>nl - insert a new line >>>>>
<<<< auto-(un)comment hotkey -> plugin >>>>
<<<< "" after done filling, move cursor to the right, outside the quotes >>>>
<<<< map ; to : >>>> -- any alternative, since ; is used by fX
<<<< fugitive >>>>
<<<< integrate ctrl-p with ag/ack, vim / -> omnisearch interface? with unite.vim as reference? >>>  -- inc. search (refining)
<<<< vim wiki plugin >>>>
<<<< :h expand -> symbols >>>>
<<<<< vim list >>>>>
<<<<< setqflist() , cexpr>>>>>
<<<<< fugitive-git is crap >>>>>
<<<<< vim broken paste, copy to/paste from clipboard? >>>>>

<DNE>TODO >>> "TOGGLE" philosophy, -> minimizes keystrokes and memorization
::: CURRENT_BUFFER(not FILE!) (default: do not open the quickfix list) ::: (philosophy: do not open quickfix unless explicitly requested, to facilitate jumping to the next occurence)
TODO >>> / (custom vimgrep (/{pattern}/j option to prevent jumping to the fist occurence}) from wikia, then /{same pattrn}...}), n to navigatee to the next occureence, leader-w key to open/close quickfix list (:cw)
TODO>>> remap * (same as /, but searches the word under the cursor), the rest is the same
::: PROJECT FILES TRACKED BY GIT REPOSITORY (default: open the quickfix window) :::
TODO >>> <leader>sgc ->if the current file is tracked by git repo && git exists, use git-grep(if :Ggrep exists use Ggrep, custom command wrapper q-args), else use vimgrep.  finally open :copen(instead of :cwindow -> so that the result shows blank if no match is found.)
